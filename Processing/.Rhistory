tests_list <- lapply(seq_along(W3_full), function(i){
t.test(W3_full[[i]], W3_full_nolist[[i]])
})
means = sapply(tests_list, '[[', 'statistic')
pvalues = as.data.frame(sapply(tests_list, '[[', 'p.value'))
cis = sapply(tests_list, '[[', 'conf.int')
#print true when the means differ
pvalues[,2] = names(W3_full)
pvalues[,3] = with(pvalues,pvalues<0.05)
#PCA
#compliance
compliance = data.frame(W3$comp_mask, W3$comp_hand, W3$comp_dist)
compliance = na.omit(compliance)
pr_compliance <- princomp(na.omit(compliance), cor = TRUE)
pr_compliance #unidimensional
W3$low_comp = apply(W3[8:10], 1, mean, na.rm = TRUE)
W3 = W3 %>%
dplyr::select(-c(comp_hand, comp_mask, comp_dist))
#Gov
gov = data.frame(W3$judg_gov_covid, W3$judg_gov)
gov = na.omit(gov)
pr_gov <- princomp(na.omit(gov), cor = TRUE)
pr_gov #unidimensional
W3$distrust_gov = apply(W3[9:10], 1, mean, na.rm = TRUE)
W3 = W3 %>%
dplyr::select(-c(judg_gov_covid, judg_gov))
#inst_tr (excluded from core)
inst_tr = data.frame(W3$tr_par, W3$tr_EU)
inst_tr = na.omit(inst_tr)
pr_inst_tr <- princomp(na.omit(inst_tr), cor = TRUE)
pr_inst_tr #unidimensional
W3$distrust_inst = apply(W3[12:13], 1, mean, na.rm = TRUE)
W3 = W3 %>%
dplyr::select(-c(tr_par, tr_EU))
#alphas
cronbach.alpha(compliance, CI=TRUE, standardized=TRUE)
cronbach.alpha(gov, CI=TRUE, standardized=TRUE)
cronbach.alpha(inst_tr, CI=TRUE, standardized=TRUE)
summary_vaccine  = as.data.frame(skim(W3))
stargazer(as.data.frame(W3), type = "text", nobs = TRUE)
#export data
saveRDS(W3, here("Input", "W3.rds"))
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidyverse, here, sjlabelled, stringr, glue, EGAnet, janitor, haven,
ggpubr, gridExtra, dplyr, GGally, qgraph, sjmisc, igraph,
imager, grid, psych, stargazer, mgm, patchwork, ggplot2,
NetworkComparisonTest, Matrix, bootnet, matrixcalc, openxlsx, devtools, jtools)
W3 = readRDS((here("Input", "W3.rds")))
## network objects
type <-c("g","g","c","g","c","g","g","g","g","g","g","g","g","c","c","g","c",
"g","g","c","g","g","g")
level <-c("1","1","2","1","2","1","1","1","1","1","1","1","1","2","2","1","2",
"1","1","2","1","1","1")
shortnames <- c(
"vac_bad",
"vac_free",
"low_worry",
"low_risk",
"conspiracy",
"nat",
"int_locus",
"low_col_resp",
"PTV_L",
"PTV_5SM",
"PTV_BOI",
"distrust_sci",
"pray",
"media",
"female",
"young",
"low_educ",
"rural",
"eco_insec",
"hesitancy",
"low_comp",
"distrust_gov",
"distrust_inst")
longnames <- c(
"Vaccine bad for health",
"Against mandatory vaccination",
"Low worry about infection",
"Low risk perception",
"Endorsing conspiracy theories",
"Trust in alternative medicine",
"Internal health locus of control",
"Low sense of collective responsability",
"Propensity to vote for L",
"Propensity to vote for 5SM",
"Propensity to vote for BOI",
"Distrust of science",
"Religion, pray",
"Digital media diet",
"Sex, female",
"Age, young",
"Educational level, low",
"Living in a rural region",
"Economic insecurity",
"Vaccine hesitancy",
"Low compliance with preventive behaviors",
"Disapproval of Government",
"Distrust of institutions")
shapes <- c(
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"square",
"circle",
"circle",
"circle")
# Community detection function
communityStability <- function(data, type, level, iterations)
{
communityMemberships <- list()
for (i in 1:iterations)
{
fitGraph <- mgm(data, type, level, k = 2, verbatim = TRUE)
iGraph<- graph_from_adjacency_matrix(abs
(fitGraph$pairwise$wadj), "undirected", weighted =
TRUE)
communityMemberships[[i]] <- cluster_walktrap(iGraph)$membership
}
communityOverlap <- matrix(NA, length(data), length(data))
for(j in 1:length(data))
{
overlapPerNode <- matrix(NA, iterations, ncol(communityOverlap))
for(k in 1: iterations)
{
overlapPerNode[k,] <- as.numeric(communityMemberships[[k]][j] == communityMemberships[[k]])
}
communityOverlap[j,] <- apply(overlapPerNode, 2, mean)
}
diag(communityOverlap) <- 0
return(list(communityMemberships = communityMemberships, communityOverlap = communityOverlap))
}
set.seed(1)
FitW3 <- mgm(W3, type, level, k = 2, binarySign = TRUE)
#function LOAD THE OBJECT down below TO SAVE TIME:
CommunityStabTotal<-communityStability(W3, type, level, it=1000)
#load the object instead:
#CommunityStabTotal = readRDS(here("Input", "CommunityStabTotal.rds"))
# Visualize community stability
pdf(file = '../Output/community_stability.pdf',paper = "USr",
height = 9, width = 12)
qgraph(CommunityStabTotal$communityOverlap, layout = "spring",
theme = "Borkulo", labels = shortnames,
nodeNames = longnames,vsize=4.0,
edge.labels=FALSE, legend = TRUE, legend.cex = 0.3)
dev.off()
# Vizualise detected communities
inputCommDetection_total<-CommunityStabTotal$communityOverlap
inputCommDetection_total[which(inputCommDetection_total <= .90)] <- 0
pdf(file = '../Output/detected_communities.pdf',paper = "USr",
height = 9, width = 12)
qgraph(inputCommDetection_total, layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames, vsize=4.0,
edge.labels=FALSE, legend = TRUE, legend.cex = 0.3)
dev.off()
# group variables based on TH CHECK AGAIN BASED ON THE TABLE
#Totalgroup_comm <- list(
# "Vaccine related"=c(1,2),
# "Individual/group"=c(3:8,22),
# "Context"=c(9:20,23,24),
# "Hesitancy"=c(21))
Totalgroup_comm <- list(
" "=c(1,2,12,20),
" "=c(3,4),
" "=c(9,11),
" "=c(6),
" "=c(7,21),
" "=c(8),
" "=c(5),
" "=c(10,22,23),
" "=c(13:19))
# define nice colors
Totalgroup_cols <- c("#BDE6F1","#E96479","#F5E9CF","#B4CFB0","#C37B89",
"#DF7861","#C3ACD0","#FFD56F", "#3FA796")
#enables theme colorblind because we don't need to specify edge.color
inputGraphMGM <- FitW3$pairwise$wadj
signsGraphMGM <- FitW3$pairwise$signs
signsGraphMGM[which(is.na(signsGraphMGM))] <- 1
inputGraphMGM <- inputGraphMGM*signsGraphMGM
# refined, no minimum
set.seed(1)
pdf(file = '../Output/MGM_nomin.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames,
cut = 0.10, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.4, borders = FALSE)
dev.off()
# refined,  minimum = 0.5
set.seed(123)
pdf(file = '../Output/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.05, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
# refined,  minimum = 0.10
pdf(file = '../Output/MGM_min_10.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.10, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
#graph with complete labels for centrality plot
GraphMGMCENT<-qgraph(inputGraphMGM,
layout = "spring", theme = "colorblind",
labels = longnames, minimum = 0,
cut = 0.10, maximum = 1, details = TRUE,
legend = FALSE)
#centrality Total
centMGM <- centralityTable(GraphMGMCENT,standardized = FALSE)
#CentralityPlot Total
centrality_table = centralityPlot(GraphMGMCENT, include = c("Strength"), scale = "raw",
orderBy = "Strength") + theme_nice() + theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Centrality_Table.jpg"), centrality_table)
#Shortest Path Lenght
SPLMGM <- centrality(GraphMGM)$ShortestPathLengths
SPLMGM <- SPLMGM[upper.tri(SPLMGM)]
#Average shortest path length
ASPL_MGM <- mean(SPLMGM)
#edge weight accuracy: non parametric bootstrap with 8 cores
edgeacc =  bootnet(W3, nBoots = 1000, nCores = 8, 'mgm')
#load the object instead:
#edgeacc = readRDS(here("Input", "edgeacc.rds"))
#plot 1
pdf('../Output/robustness/edge_accuracy.pdf', height = 70, width = 50)
plot(edgeacc, labels = longnames, order = "sample")
dev.off()
#Plot 2
pdf('../Output/robustness/edge_accuracy_CI.pdf', height = 70, width = 50)
plot(edgeacc, plot = "interval", split0 = TRUE, order="sample", labels=longnames)
dev.off()
#summary
saummary_edgeacc = summary(edgeacc, statistics = c("edge", "strength"),
perNode = FALSE, rank = FALSE)
# case dropping bootstrap
centstab = bootnet(W3, nBoots = 1000, 'mgm', type = "case", nCores = 8)
#load the object instead:
#centstab = readRDS(here("Input", "centstab.rds"))
#plot 1
pdf('../Output/robustness/Centrality_stability.pdf', height = 70, width = 50)
plot(centstab, "Strength", perNode = TRUE, labels = longnames,
subsetRange = c(100,50))
dev.off()
#Plot 2
pdf('../Output/robustness/Centrality_stability_CI.pdf', height = 70, width = 50)
plot(centstab, "Strength", CIstyle =  "quantiles")
dev.off()
#CS-coefficient (result should be above 0.25, better if above 0.5)
corstab = corStability(centstab)
# Test: difference of weight ties 2-3 vs 4-5
differenceTest(edgeacc, 2--3, 3--4, "strength")
# Plot test results for every edge weight in the network
pdf('../Output/robustness/test_edges.pdf', height = 70, width = 50)
plot(edgeacc, "edge", plot = "difference", onlyNonZero = TRUE, order = "sample",
labels = T)
dev.off()
# Test: difference of strength of node 2 vs 3 (if the bootstrapped CI include 0, they do not differ)
differenceTest(edgeacc, 2, 3, "strength")
# Plot test results for every edge weight in the network
pdf('../Output/robustness/test_strenghts.pdf', height = 70, width = 50)
plot(edgeacc, "strength", order = "mean", labels = T)
dev.off()
#small world network
W3_small_core = smallworldness(FitW3$pairwise$wadj, B = 1000)
W3_small_core
#communities
saveRDS(CommunityStabTotal, here("Input", "CommunityStabTotal.rds"))
#bootnet
saveRDS(edgeacc, here("Input","edgeacc.rds"))
saveRDS(centstab, here("Input", "centstab.rds"))
##only upper triangle without edge weigths 0 for readability
EdgeWeight_Total_half<-upper.triangle(inputGraphMGM)
EdgeWeight_Total_half[EdgeWeight_Total_half == 0] <- NA
EdgeWeightsExcel_half<- list("mgm" = EdgeWeight_Total_half)
write.xlsx(EdgeWeightsExcel_half, "../Output/EdgeWeightsExcel_half.xlsx",
colWidths = "auto", rowNames = TRUE)
# group variables based on TH CHECK AGAIN BASED ON THE TABLE
#Totalgroup_comm <- list(
# "Vaccine related"=c(1,2),
# "Individual/group"=c(3:8,22),
# "Context"=c(9:20,23,24),
# "Hesitancy"=c(21))
Totalgroup_comm <- list(
" "=c(1,2,12,20),
" "=c(3,4),
" "=c(5,8),
" "=c(6,7),
" "=c(9,11),
" "=c(10,22,23),
" "=c(13:19))
# define nice colors
Totalgroup_cols <- c("#BDE6F1","#E96479","#3FA796","#B4CFB0",
"#DF7861","#C3ACD0","#FFD56F")
#enables theme colorblind because we don't need to specify edge.color
inputGraphMGM <- FitW3$pairwise$wadj
signsGraphMGM <- FitW3$pairwise$signs
signsGraphMGM[which(is.na(signsGraphMGM))] <- 1
inputGraphMGM <- inputGraphMGM*signsGraphMGM
# refined, no minimum
set.seed(1)
pdf(file = '../Output/MGM_nomin.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames,
cut = 0.10, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.4, borders = FALSE)
dev.off()
# refined,  minimum = 0.5
set.seed(123)
pdf(file = '../Output/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.05, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
# refined,  minimum = 0.10
pdf(file = '../Output/MGM_min_10.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.10, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
# group variables based on TH CHECK AGAIN BASED ON THE TABLE
#Totalgroup_comm <- list(
# "Vaccine related"=c(1,2),
# "Individual/group"=c(3:8,22),
# "Context"=c(9:20,23,24),
# "Hesitancy"=c(21))
Totalgroup_comm <- list(
" "=c(1,2,12,20),
" "=c(3,4),
" "=c(5,8),
" "=c(6,7,21),
" "=c(9,11),
" "=c(10,22,23),
" "=c(13:19))
# define nice colors
Totalgroup_cols <- c("#BDE6F1","#E96479","#3FA796","#B4CFB0",
"#DF7861","#C3ACD0","#FFD56F")
#enables theme colorblind because we don't need to specify edge.color
inputGraphMGM <- FitW3$pairwise$wadj
signsGraphMGM <- FitW3$pairwise$signs
signsGraphMGM[which(is.na(signsGraphMGM))] <- 1
inputGraphMGM <- inputGraphMGM*signsGraphMGM
# refined, no minimum
set.seed(1)
pdf(file = '../Output/MGM_nomin.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames,
cut = 0.10, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.4, borders = FALSE)
dev.off()
# refined,  minimum = 0.5
set.seed(123)
pdf(file = '../Output/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.05, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
# refined,  minimum = 0.10
pdf(file = '../Output/MGM_min_10.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.10, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
set.seed(123)
pdf(file = '../Output/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.07, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
set.seed(123)
pdf(file = '../Output/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.06, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
set.seed(123)
pdf(file = '../Output/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.08, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
set.seed(123)
pdf(file = '../Output/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.07, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
set.seed(100)
pdf(file = '../Output/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.07, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
set.seed(100)
pdf(file = '../Output/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.07, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.4, borders = FALSE)
dev.off()
??qgraph
set.seed(100)
pdf(file = '../Output/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.07, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.35, borders = FALSE)
dev.off()
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.07, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.35, borders = FALSE,
filetype="jpg")
set.seed(100)
pdf(file = '../Output/MGM_min_07.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.07, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.35, borders = FALSE)
dev.off()
# same but in jpg
set.seed(100)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.07, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.35, borders = FALSE,
filetype="jpg", filename=here("Output", "MGM_min_07.jpg"))
ASPL_MGM
