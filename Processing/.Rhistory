summary(model_risk)$coeff[-1,4] < 0.05
summary(model_conspiracy)$coeff[-1,4] < 0.05
summary(model_nat)$coeff[-1,4] < 0.05
summary(model_h_locus)$coeff[-1,4] < 0.05
summary(model_he_eco)$coeff[-1,4] < 0.05
summary(model_PTV_L)$coeff[-1,4] < 0.05
summary(model_PTV_5SM)$coeff[-1,4] < 0.05 #not significant
summary(model_PTV_BOI)$coeff[-1,4] < 0.05
summary(model_tr_sci)$coeff[-1,4] < 0.05
summary(model_pray)$coeff[-1,4] < 0.05 #not significant
summary(model_media)$coeff[-1,4] < 0.05 #not significant
summary(model_low_comp)$coeff[-1,4] < 0.05
summary(model_distrust_gov)$coeff[-1,4] < 0.05
summary(model_distrust_inst)$coeff[-1,4] < 0.05
#vector for significance
Significance = rep(c("Significant"),17)
Significance[3] = "Not significant"
Significance[10] = "Not significant"
Significance[13] = "Not significant"
Significance[14] = "Not significant"
#Gatering strength scores
strength = centMGM %>%
filter(measure=="Strength") %>%
select(value) %>%
filter(!row_number() %in% c(15:20))
final_tab_z
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidyverse, here, sjlabelled, stringr, glue, EGAnet, janitor, haven,
ggpubr, gridExtra, dplyr, GGally, qgraph, sjmisc, igraph,
grid, psych, stargazer, mgm, backbone, ggplot2, tnet, ggrepel,
NetworkComparisonTest, Matrix, bootnet, matrixcalc, openxlsx, devtools, jtools)
W3 = readRDS((here("Input", "W3.rds")))
## network objects
type <-c("g","g","c","g","c","g","g","g","g","g","g","g","g","c","c","g","c",
"g","g","c","g","g","g")
level <-c("1","1","2","1","2","1","1","1","1","1","1","1","1","2","2","1","2",
"1","1","2","1","1","1")
shortnames <- c(
"vac_bad",
"vac_free",
"low_worry",
"low_risk",
"conspiracy",
"nat",
"int_locus",
"low_col_resp",
"PTV_L",
"PTV_5SM",
"PTV_BOI",
"distrust_sci",
"pray",
"media",
"female",
"young",
"low_educ",
"rural",
"eco_insec",
"hesitancy",
"low_comp",
"distrust_gov",
"distrust_inst")
longnames <- c(
"Vaccine bad for health",
"Against mandatory vaccination",
"Low worry about infection",
"Low risk perception",
"Endorsing conspiracy theories",
"Trust in alternative medicine",
"Internal health locus of control",
"Low sense of collective responsability",
"Propensity to vote for L",
"Propensity to vote for 5SM",
"Propensity to vote for BOI",
"Distrust of science",
"Religion, pray",
"Digital media diet",
"Sex, female",
"Age, young",
"Educational level, low",
"Living in a rural region",
"Economic insecurity",
"Vaccine hesitancy",
"Low compliance with preventive behaviors",
"Disapproval of Government",
"Distrust of institutions")
shapes <- c(
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"square",
"circle",
"circle",
"circle")
# Community detection function
communityStability <- function(data, type, level, iterations)
{
communityMemberships <- list()
for (i in 1:iterations)
{
fitGraph <- mgm(data, type, level, k = 2, verbatim = TRUE)
iGraph<- graph_from_adjacency_matrix(abs
(fitGraph$pairwise$wadj), "undirected", weighted =
TRUE)
communityMemberships[[i]] <- cluster_walktrap(iGraph)$membership
}
communityOverlap <- matrix(NA, length(data), length(data))
for(j in 1:length(data))
{
overlapPerNode <- matrix(NA, iterations, ncol(communityOverlap))
for(k in 1: iterations)
{
overlapPerNode[k,] <- as.numeric(communityMemberships[[k]][j] == communityMemberships[[k]])
}
communityOverlap[j,] <- apply(overlapPerNode, 2, mean)
}
diag(communityOverlap) <- 0
return(list(communityMemberships = communityMemberships, communityOverlap = communityOverlap))
}
set.seed(1)
FitW3 <- mgm(W3, type, level, k = 2, binarySign = TRUE)
#LOAD THE OBJECT down below TO SAVE TIME:
#CommunityStabTotal<-communityStability(W3, type, level, it=1000)
#load the object instead:
CommunityStabTotal = readRDS(here("Input", "CommunityStabTotal.rds"))
# Visualize community stability
pdf(file = '../Output/community_stability.pdf',paper = "USr",
height = 9, width = 12)
qgraph(CommunityStabTotal$communityOverlap, layout = "spring",
theme = "Borkulo", labels = shortnames,
nodeNames = longnames,vsize=4.0,
edge.labels=FALSE, legend = TRUE, legend.cex = 0.3)
dev.off()
# Vizualise detected communities
inputCommDetection_total<-CommunityStabTotal$communityOverlap
inputCommDetection_total[which(inputCommDetection_total <= .90)] <- 0
pdf(file = '../Output/detected_communities.pdf',paper = "USr",
height = 9, width = 12)
qgraph(inputCommDetection_total, layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames, vsize=4.0,
edge.labels=FALSE, legend = TRUE, legend.cex = 0.3)
dev.off()
# group variables based on TH CHECK AGAIN BASED ON THE TABLE
#Totalgroup_comm <- list(
# "Vaccine related"=c(1,2),
# "Individual/group"=c(3:8,22),
# "Context"=c(9:20,23,24),
# "Hesitancy"=c(21))
Totalgroup_comm <- list(
" "=c(1,2,12,20),
" "=c(3,4),
" "=c(5,8),
" "=c(6,7,21),
" "=c(9,11),
" "=c(10,22,23),
" "=c(13:19))
# define nice colors
Totalgroup_cols <- c("#BDE6F1","#E96479","#3FA796","#B4CFB0",
"#DF7861","#C3ACD0","#FFD56F")
#enables theme colorblind because we don't need to specify edge.color
inputGraphMGM <- FitW3$pairwise$wadj
signsGraphMGM <- FitW3$pairwise$signs
signsGraphMGM[which(is.na(signsGraphMGM))] <- 1
inputGraphMGM <- inputGraphMGM*signsGraphMGM
# refined, no minimum
set.seed(1)
pdf(file = '../Output/MGM_nomin.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames,
cut = 0.10, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.4, borders = FALSE)
dev.off()
# refined,  minimum = 0.7
set.seed(100)
pdf(file = '../Output/MGM_min_07.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.07, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.35, borders = FALSE)
dev.off()
# same but in jpg
set.seed(100)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.07, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.35, borders = FALSE,
filetype="jpg", filename=here("Output", "MGM_min_07.jpg"))
# refined,  minimum = 0.10
pdf(file = '../Output/MGM_min_10.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.10, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
#graph with complete labels for centrality plot
GraphMGMCENT<-qgraph(inputGraphMGM,
layout = "spring", theme = "colorblind",
labels = longnames, minimum = 0,
cut = 0.10, maximum = 1, details = TRUE,
legend = FALSE)
#centrality Total
centMGM <- centralityTable(GraphMGMCENT,standardized = FALSE, signed = FALSE)
#CentralityPlot Total
centrality_table = centralityPlot(GraphMGMCENT, include = c("Strength"), scale = "raw",
orderBy = "Strength", signed = FALSE) + theme_nice() + theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Centrality_Table.jpg"), centrality_table)
#Convert to igraph
igraph_graph <- graph.adjacency(FitW3$pairwise$wadj, mode="undirected", weighted = TRUE)
#Degree centrality
degree_cent = degree(igraph_graph)
#Merge vectors
degree_data <- data.frame(names(W3), degree_cent)
#Shortest Path Lenght
SPLMGM <- centrality(GraphMGM)$ShortestPathLengths
SPLMGM <- SPLMGM[upper.tri(SPLMGM)]
#Average shortest path length
ASPL_MGM <- mean(SPLMGM)
#Check with another function (this does not account for edge weights)
splmgm = shortest.paths(igraph_graph)
splmgm <- splmgm[upper.tri(splmgm)]
aspl_mgm <- mean(splmgm)
#and with tnet from opshal
spl_o = distance_w(FitW3$pairwise$wadj, directed=NULL, subsample=1)
spl_o <- spl_o[upper.tri(spl_o)]
aspl_o <- mean(spl_o)
#edge weight accuracy: non parametric bootstrap with 8 cores
#edgeacc =  bootnet(W3, nBoots = 1000, nCores = 8, 'mgm')
#load the object instead:
edgeacc = readRDS(here("Input", "edgeacc.rds"))
#plot 1
pdf('../Output/robustness/edge_accuracy.pdf', height = 70, width = 50)
plot(edgeacc, labels = longnames, order = "sample")
dev.off()
#Plot 2
pdf('../Output/robustness/edge_accuracy_CI.pdf', height = 70, width = 50)
plot(edgeacc, plot = "interval", split0 = TRUE, order="sample", labels=longnames)
dev.off()
#summary
saummary_edgeacc = summary(edgeacc, statistics = c("edge", "strength"),
perNode = FALSE, rank = FALSE)
# case dropping bootstrap
#centstab = bootnet(W3, nBoots = 1000, 'mgm', type = "case", nCores = 8)
#load the object instead:
centstab = readRDS(here("Input", "centstab.rds"))
#plot 1
pdf('../Output/robustness/Centrality_stability.pdf', height = 70, width = 50)
plot(centstab, "Strength", perNode = TRUE, labels = longnames,
subsetRange = c(100,50))
dev.off()
#Plot 2
pdf('../Output/robustness/Centrality_stability_CI.pdf', height = 70, width = 50)
plot(centstab, "Strength", CIstyle =  "quantiles")
dev.off()
#CS-coefficient (result should be above 0.25, better if above 0.5)
corstab = corStability(centstab)
# Test: difference of weight ties 2-3 vs 4-5
differenceTest(edgeacc, 2--3, 3--4, "strength")
# Plot test results for every edge weight in the network
pdf('../Output/robustness/test_edges.pdf', height = 70, width = 50)
plot(edgeacc, "edge", plot = "difference", onlyNonZero = TRUE, order = "sample",
labels = T)
dev.off()
# Test: difference of strength of node 5 [conspiracy] vs 20 [hesitancy] (if the bootstrapped CI include 0, they do not differ)
test_conspiracy_vs_hesitancy = differenceTest(edgeacc, 5, 20, "strength")
# Plot test results for every edge weight in the network
pdf('../Output/robustness/test_strenghts.pdf', height = 70, width = 50)
plot(edgeacc, "strength", order = "mean", labels = T)
dev.off()
#small world network
W3_small_core = smallworldness(FitW3$pairwise$wadj, B = 1000)
W3_small_core
#model selection
backbone.suggest(FitW3$pairwise$wadj)
# application of the disparity filter
backbone_matrix <- disparity(
inputGraphMGM,
alpha = 0.05,
signed = FALSE,
mtc = "none",
class = "original",
narrative = TRUE)
#plot
set.seed(100)
GraphMGM<-qgraph(backbone_matrix,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.35, borders = FALSE,
filetype="jpg", filename=here("Output", "backbone.jpg"))
#Fitting logistic regressions
model_vac_bad <- glm( hesitancy ~ vac_bad + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_vac_ob <- glm( hesitancy ~ vac_ob + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_worry <- glm( hesitancy ~ worry + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_risk <- glm( hesitancy ~ risk + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_conspiracy <- glm( hesitancy ~ conspiracy + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_nat <- glm( hesitancy ~ nat + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_h_locus <- glm( hesitancy ~ h_locus + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_he_eco <- glm( hesitancy ~ he_eco + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_PTV_L <- glm( hesitancy ~ PTV_L + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_PTV_5SM <- glm( hesitancy ~ PTV_5SM + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_PTV_BOI <- glm( hesitancy ~ PTV_BOI + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_tr_sci <- glm( hesitancy ~ tr_sci + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_pray <- glm( hesitancy ~ pray + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_media <- glm( hesitancy ~ media + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_low_comp <- glm( hesitancy ~ low_comp + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_distrust_gov <- glm( hesitancy ~ distrust_gov + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
model_distrust_inst <- glm( hesitancy ~ distrust_inst + sex + age + educ + reg + eco_insec,
data = W3, family = binomial)
#Additional model for final table
model_educ <- glm( hesitancy ~ educ + sex + age + reg + eco_insec,
data = W3, family = binomial)
#coeff
coeff_educ =  exp(extract_numeric(model_educ$coefficients[2]))
#significance
summary(model_educ)$coeff[-1,4] < 0.05
#Gathering coefficients
coeff = extract_numeric(model_vac_bad$coefficients[2])
coeff[2] = extract_numeric(model_vac_ob$coefficients[2])
coeff[3] = extract_numeric(model_worry$coefficients[2])
coeff[4] = extract_numeric(model_risk$coefficients[2])
coeff[5] = extract_numeric(model_conspiracy$coefficients[2])
coeff[6] = extract_numeric(model_nat$coefficients[2])
coeff[7] = extract_numeric(model_h_locus$coefficients[2])
coeff[8] = extract_numeric(model_he_eco$coefficients[2])
coeff[9] = extract_numeric(model_PTV_L$coefficients[2])
coeff[10] = extract_numeric(model_PTV_5SM$coefficients[2])
coeff[11] = extract_numeric(model_PTV_BOI$coefficients[2])
coeff[12] = extract_numeric(model_tr_sci$coefficients[2])
coeff[13] = extract_numeric(model_pray$coefficients[2])
coeff[14] = extract_numeric(model_media$coefficients[2])
coeff[15] = extract_numeric(model_low_comp$coefficients[2])
coeff[16] = extract_numeric(model_distrust_gov$coefficients[2])
coeff[17] = extract_numeric(model_distrust_inst$coefficients[2])
#Transform in odds ratio
coeff_exp = unlist(lapply(coeff, exp))
#Significance
summary(model_vac_bad)$coeff[-1,4] < 0.05
summary(model_vac_ob)$coeff[-1,4] < 0.05
summary(model_worry)$coeff[-1,4] < 0.05 #not significant
summary(model_risk)$coeff[-1,4] < 0.05
summary(model_conspiracy)$coeff[-1,4] < 0.05
summary(model_nat)$coeff[-1,4] < 0.05
summary(model_h_locus)$coeff[-1,4] < 0.05
summary(model_he_eco)$coeff[-1,4] < 0.05
summary(model_PTV_L)$coeff[-1,4] < 0.05
summary(model_PTV_5SM)$coeff[-1,4] < 0.05 #not significant
summary(model_PTV_BOI)$coeff[-1,4] < 0.05
summary(model_tr_sci)$coeff[-1,4] < 0.05
summary(model_pray)$coeff[-1,4] < 0.05 #not significant
summary(model_media)$coeff[-1,4] < 0.05 #not significant
summary(model_low_comp)$coeff[-1,4] < 0.05
summary(model_distrust_gov)$coeff[-1,4] < 0.05
summary(model_distrust_inst)$coeff[-1,4] < 0.05
#vector for significance
Significance = rep(c("Significant"),17)
Significance[3] = "Not significant"
Significance[10] = "Not significant"
Significance[13] = "Not significant"
Significance[14] = "Not significant"
#Gatering strength scores
strength = centMGM %>%
filter(measure=="Strength") %>%
select(value) %>%
filter(!row_number() %in% c(15:20))
#Gatering degree
degree_cent_graph = degree_cent[-c(15:20)]
#Gathering names
names = shortnames
names = names[-c(15:20)]
#Merging into a df1
scatterplot = data.frame(names, coeff_exp, strength, Significance) %>%
rename(strength = value)
scatterplot$names = as.factor(scatterplot$names)
scatterplot$coeff_exp = as.numeric(scatterplot$coeff_exp)
scatterplot$strength = as.numeric(scatterplot$strength)
scatterplot$Significance = as.factor(scatterplot$Significance)
#Merging into a df2
scatterplot_degree = data.frame(names, coeff_exp, degree_cent_graph, Significance)
scatterplot_degree$degree_cent_graph = as.numeric(scatterplot_degree$degree_cent_graph)
#Strength
graph_strength = ggplot(scatterplot, aes(x=strength, y=coeff_exp, label = names)) +
geom_point((aes(color=Significance))) + theme_nice() +
geom_smooth(method=lm, se = FALSE, linetype = "dotted", color = "#DCDCDC") +
geom_text_repel(size = 3) +
xlab("Strength centrality") + ylab("Regression coefficient") +
scale_fill_discrete(labels=c('label1', 'label2'))
ggsave(here("Output", "graph_strength.jpg"), graph_strength, height = 5, width = 8)
#Degree
graph_degree = ggplot(scatterplot_degree, aes(x=degree_cent_graph, y=coeff_exp, label = names)) +
geom_point((aes(color=Significance))) + theme_nice() +
geom_smooth(method=lm, se = FALSE, linetype = "dotted", color = "#DCDCDC") +
geom_text_repel(size = 3) +
xlab("Degree centrality") + ylab("Regression coefficient") +
scale_fill_discrete(labels=c('label1', 'label2'))
ggsave(here("Output", "graph_degree.jpg"), graph_degree, height = 5, width = 8)
#Df with variables that (1) are tied to hesitancy, (2) are in the backbone
final_tab = scatterplot %>%
mutate(degree = scatterplot_degree$degree_cent_graph) %>%
add_row(names = "educ", coeff_exp = 1.764246, strength = 1.061313041,
Significance = "Significant", degree = 10) %>%
filter(names %in% c("vac_free","vac_bad","low_comp","conspiracy","nat","educ")) %>%
mutate(edge_weight=c(0.95, 0.34, 0.34, 0.12, 0.07, 0.07)) %>%
relocate(Significance, .after = edge_weight)
#conversion of type
final_tab$names = as.factor(final_tab$names)
final_tab$coeff_exp = as.numeric(final_tab$coeff_exp)
final_tab$strength = as.numeric(final_tab$strength)
final_tab$degree = as.numeric(final_tab$degree)
final_tab$edge_weight = as.numeric(final_tab$edge_weight)
final_tab$Significance = as.factor(final_tab$Significance)
#Z scores
final_tab_z = final_tab %>%
mutate(coeff_exp = (coeff_exp - mean(coeff_exp))/sd(coeff_exp),
strength = (strength - mean(strength))/sd(strength),
degree = (degree - mean(degree))/sd(degree),
edge_weight = (edge_weight - mean(edge_weight))/sd(edge_weight))
final_tab_z
#Z scores
final_tab_z = final_tab %>%
mutate(coeff_exp = (coeff_exp - mean(coeff_exp))/sd(coeff_exp),
strength = (strength - mean(strength))/sd(strength),
degree = (degree - mean(degree))/sd(degree),
edge_weight = (edge_weight - mean(edge_weight))/sd(edge_weight)) %>%
select(-c(degree, Significance))
final_tab_z
#communities
saveRDS(CommunityStabTotal, here("Input", "CommunityStabTotal.rds"))
#bootnet
saveRDS(edgeacc, here("Input","edgeacc.rds"))
saveRDS(centstab, here("Input", "centstab.rds"))
#final tab
saveRDS(final_tab, here("Input", "final_tab.rds"))
saveRDS(final_tab_z, here("Input", "final_tab_z.rds"))
##only upper triangle without edge weigths 0 for readability
EdgeWeight_Total_half<-upper.triangle(inputGraphMGM)
EdgeWeight_Total_half[EdgeWeight_Total_half == 0] <- NA
EdgeWeightsExcel_half<- list("mgm" = EdgeWeight_Total_half)
write.xlsx(EdgeWeightsExcel_half, "../Output/EdgeWeightsExcel_half.xlsx",
colWidths = "auto", rowNames = TRUE)
library(pacman)
p_load(tidyverse, here, sjlabelled, stringr, glue, janitor, haven, stargazer,
ltm, skimr, kableExtra)
table_comp <- "
|     Index     | 1° component  | 2° component  | Cronbach's α |
|:-------------:|:-------------:|:-------------:|:------------:|
| Compliance    |        1.5    |     0.6       |     0.8      |
| Government    |        1.4    |     0.4       |     0.9      |
| Institutional trust|        1.3    |     0.6       |     0.8      |
"
cat(table_comp) # output the table in a format good for HTML/PDF/docx conversion
table_pred <- "
|   Predictor  |  Coefficient  |
|:-------------:|:-------------:|
| Against mandatory vaccination    |    0,95 |
| Vaccine bad for health   | 0,34    |
| Low compliance with preventive behaviors |  0,34 |
| Distrust of science | 0,23 |
| Endorsing conspiracy theories | 0,12 |
| Trust in alternative medicine    |    0,07 |
| Low educational level  |    0,07 |
"
cat(table_pred) # output the table in a format good for HTML/PDF/docx conversion
final_tab = readRDS(here("Input", "final_tab.RDS"))
final_tab_z = readRDS(here("Input", "final_tab_z.RDS"))
write.csv(final_tab, here("Input", "final_tab.csv"), row.names=FALSE)
write.csv(final_tab_z, here("Input", "final_tab_z.csv"), row.names=FALSE)
final_tab_z
