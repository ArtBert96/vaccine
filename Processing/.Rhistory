legend.cex = 0.4)
dev.off()
pdf(file = '../Output/complete/MGM_min_10.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.10, maximum = 1,
details = FALSE, vsize=6.0, legend = TRUE,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend.cex = 0.4)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidyverse, here, sjlabelled, stringr, glue, EGAnet, janitor, haven,
ggpubr, gridExtra, dplyr, GGally, qgraph, sjmisc, igraph,
imager, grid, ggplotify, stargazer, mgm, patchwork, ggplot2,
NetworkComparisonTest, Matrix, bootnet, matrixcalc, openxlsx)
W3 = readRDS((here("Input", "W3_complete.rds")))
#controls = data.frame(W3$sex, W3$age, W3$educ, W3$eco_insec)
#W3 = W3 %>%
#dplyr::select(-c(sex, age, educ, eco_insec))
## network objects
type <-c("g","c","g","g","g","g","c","c","g","g","g","g","g","g","g","c","c",
"g","c","c","g","g","g","g","g")
level <-c("1","2","1","1","1","1","2","2","1","1","1","1","1","1","1","2","2",
"1","2","2","1","1","1","1","1")
shortnames <- c(
"he_eco",
"worry",
"tr_science",
"vac_bad",
"vac_sci",
"vac_ob",
"conspiracy",
"pol_int",
"L-R",
"PTV_DP",
"PTV_FI",
"PTV_L",
"PTV_5SM",
"PTV_BOI",
"health",
"eco_insec",
"sex",
"age",
"educ",
"int_vac",
"comp",
"gov",
"w2r",
"inst_tr",
"c_h_d")
longnames <- c(
"Public health vs economy",
"Worry about infection",
"Trust in science",
"Vaccine bad for health",
"Vaccine trust in science",
"Vaccination obligation",
"Origin of virus",
"Political Interest",
"Left/right self-placement",
"Propensity to vote for DP",
"Propensity to vote for FI",
"Propensity to vote for L",
"Propensity to vote for 5SM",
"Propensity to vote for BOI",
"Self-reported health",
"Economic insecurity",
"Sex",
"Age",
"Education",
"Vaccine intention",
"Compliance to preventive behaviors",
"Judgment on Government",
"Willingness to restrict freedom",
"Institutional trust",
"COVID-19 related health difficulties")
communityStability <- function(data, type, level, iterations)
{
communityMemberships <- list()
for (i in 1:iterations)
{
fitGraph <- mgm(data, type, level, k = 2, verbatim = TRUE)
iGraph<- graph_from_adjacency_matrix(abs
(fitGraph$pairwise$wadj), "undirected", weighted =
TRUE)
communityMemberships[[i]] <- cluster_walktrap(iGraph)$membership
}
communityOverlap <- matrix(NA, length(data), length(data))
for(j in 1:length(data))
{
overlapPerNode <- matrix(NA, iterations, ncol(communityOverlap))
for(k in 1: iterations)
{
overlapPerNode[k,] <- as.numeric(communityMemberships[[k]][j] == communityMemberships[[k]])
}
communityOverlap[j,] <- apply(overlapPerNode, 2, mean)
}
diag(communityOverlap) <- 0
return(list(communityMemberships = communityMemberships, communityOverlap = communityOverlap))
}
set.seed(1)
FitW3 <- mgm(W3, type, level, k = 2, binarySign = TRUE)
CommunityStabTotal<-communityStability(W3, type, level, it=1000)
# Visualize community stability
pdf(file = '../Output/complete/community_stability.pdf',paper = "USr",
height = 9, width = 12)
qgraph(CommunityStabTotal$communityOverlap, layout = "spring",
theme = "Borkulo", labels = shortnames,
nodeNames = longnames,vsize=4.0,
edge.labels=FALSE, legend = TRUE, legend.cex = 0.3)
dev.off()
# Vizualise detected communities
inputCommDetection_total<-CommunityStabTotal$communityOverlap
inputCommDetection_total[which(inputCommDetection_total <= .90)] <- 0
pdf(file = '../Output/complete/detected_communities.pdf',paper = "USr",
height = 9, width = 12)
qgraph(inputCommDetection_total, layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames, vsize=4.0,
edge.labels=FALSE, legend = TRUE, legend.cex = 0.3)
dev.off()
# group variables based on outcome detection community stability so we can assign colors
Totalgroup_comm <- list(
" "=c(1,2,7,8,10,13,15,16,17,18,19,22,23,24,25),
" "=c(3:6,21),
" "=c(20),
" "=c(9,11,12,14))
# define nice colors
Totalgroup_cols <- c("#4EB64A","#F4AD0A","#54C2F2")
```
# Vizualise detected communities
inputCommDetection_total<-CommunityStabTotal$communityOverlap
inputCommDetection_total[which(inputCommDetection_total <= .90)] <- 0
pdf(file = '../Output/complete/detected_communities.pdf',paper = "USr",
height = 9, width = 12)
qgraph(inputCommDetection_total, layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames, vsize=4.0,
edge.labels=FALSE, legend = TRUE, legend.cex = 0.3)
dev.off()
# group variables based on outcome detection community stability so we can assign colors
Totalgroup_comm <- list(
" "=c(1,2,7,8,10,13,15,16,17,18,19,22,23,24,25),
" "=c(3:6,21),
" "=c(20),
" "=c(9,11,12,14))
# define nice colors
Totalgroup_cols <- c("#4EB64A","#F4AD0A","#54C2F2")
#enables theme colorblind because we don't need to specify edge.color
inputGraphMGM <- FitW3$pairwise$wadj
signsGraphMGM <- FitW3$pairwise$signs
signsGraphMGM[which(is.na(signsGraphMGM))] <- 1
inputGraphMGM <- inputGraphMGM*signsGraphMGM
# refined, no minimum
pdf(file = '../Output/complete/MGM_nomin.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames,
cut = 0.10, maximum = 1,
details = FALSE, vsize=6.0,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.4)
dev.off()
# refined,  minimum = 0.5
pdf(file = '../Output/complete/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.05, maximum = 1,
details = FALSE, vsize=6.0,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.4)
dev.off()
# refined,  minimum = 0.10
pdf(file = '../Output/complete/MGM_min_10.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.10, maximum = 1,
details = FALSE, vsize=6.0, legend = TRUE,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend.cex = 0.4)
dev.off()
#graph with complete labels for centrality plot
GraphMGMCENT<-qgraph(inputGraphMGM,
layout = "spring", theme = "colorblind",
labels = longnames, minimum = 0,
cut = 0.10, maximum = 1, details = TRUE,
legend = FALSE)
#centrality Total
centMGM <- centralityTable(GraphMGMCENT,standardized = FALSE)
#CentralityPlot Total
pdf('../Output/complete/Centrality_Table.pdf')
centralityPlot(GraphMGMCENT, include = c("Strength"), scale = "raw",
orderBy = "Strength")
dev.off()
#Shortest Path Lenght
SPLMGM <- centrality(GraphMGM)$ShortestPathLengths
SPLMGM <- SPLMGM[upper.tri(SPLMGM)]
#Average shortest path length
ASPL_MGM <- mean(SPLMGM)
set.seed(1)
MGM_CentStability <- bootnet(W3, nBoots = 1000,
default = "mgm", type = "case",
statistics = c("Strength"), level = level, criterion="CV", binarySign=FALSE)
# Vizualise detected communities
inputCommDetection_total<-CommunityStabTotal$communityOverlap
inputCommDetection_total[which(inputCommDetection_total <= .90)] <- 0
pdf(file = '../Output/complete/detected_communities.pdf',paper = "USr",
height = 9, width = 12)
qgraph(inputCommDetection_total, layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames, vsize=4.0,
edge.labels=FALSE, legend = TRUE, legend.cex = 0.3)
dev.off()
# group variables based on outcome detection community stability so we can assign colors
Totalgroup_comm <- list(
" "=c(1,2,7,8,10,13,15,16,17,18,19,22,23,24,25),
" "=c(3:6,21),
" "=c(20),
" "=c(9,11,12,14))
# define nice colors
Totalgroup_cols <- c("#4EB64A","#F4AD0A","#54C2F2", "#9370DB")
#enables theme colorblind because we don't need to specify edge.color
inputGraphMGM <- FitW3$pairwise$wadj
signsGraphMGM <- FitW3$pairwise$signs
signsGraphMGM[which(is.na(signsGraphMGM))] <- 1
inputGraphMGM <- inputGraphMGM*signsGraphMGM
# refined, no minimum
pdf(file = '../Output/complete/MGM_nomin.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames,
cut = 0.10, maximum = 1,
details = FALSE, vsize=6.0,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.4)
dev.off()
# refined,  minimum = 0.5
pdf(file = '../Output/complete/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.05, maximum = 1,
details = FALSE, vsize=6.0,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.4)
dev.off()
# refined,  minimum = 0.10
pdf(file = '../Output/complete/MGM_min_10.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.10, maximum = 1,
details = FALSE, vsize=6.0, legend = TRUE,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend.cex = 0.4)
dev.off()
#graph with complete labels for centrality plot
GraphMGMCENT<-qgraph(inputGraphMGM,
layout = "spring", theme = "colorblind",
labels = longnames, minimum = 0,
cut = 0.10, maximum = 1, details = TRUE,
legend = FALSE)
#centrality Total
centMGM <- centralityTable(GraphMGMCENT,standardized = FALSE)
#CentralityPlot Total
pdf('../Output/complete/Centrality_Table.pdf')
centralityPlot(GraphMGMCENT, include = c("Strength"), scale = "raw",
orderBy = "Strength")
dev.off()
#Shortest Path Lenght
SPLMGM <- centrality(GraphMGM)$ShortestPathLengths
SPLMGM <- SPLMGM[upper.tri(SPLMGM)]
#Average shortest path length
ASPL_MGM <- mean(SPLMGM)
set.seed(1)
MGM_CentStability <- bootnet(W3, nBoots = 1000,
default = "mgm", type = "case",
statistics = c("Strength"), level = level, criterion="CV", binarySign=FALSE)
corStability(MGM_CentStability)
#plot
plot(MGM_CentStability, subsetRange = c(100,50), statistics = c("Strength"),
labels = longnames)
#plot ordered
pdf('../Output/complete/Centrality_stability.pdf', height = 70, width = 50)
plot(MGM_CentStability, "Strength", perNode = TRUE, labels = longnames,
subsetRange = c(100,50))
dev.off()
#Edge accuracy Total
set.seed(1)
Bootnet_MGM<- bootnet(W3, nBoots = 1000,
default = "mgm", level = level, criterion="CV", binarySign=FALSE,
labels = longnames)
#pdf
pdf('../Output/complete/Edge accuracy MGM.pdf', height = 50, width = 50)
plot(Bootnet_MGM, labels = TRUE, order = "mean", res=150)
dev.off()
##only upper triangle without edge weigths 0 for readability
EdgeWeight_Total_half<-upper.triangle(inputGraphMGM)
EdgeWeight_Total_half[EdgeWeight_Total_half == 0] <- NA
EdgeWeightsExcel_half<- list("mgm" = EdgeWeight_Total_half)
write.xlsx(EdgeWeightsExcel_half, "../Output/complete/EdgeWeightsExcel_half.xlsx",
colWidths = "auto", rowNames = TRUE)
View(MGM_CentStability)
View(MGM_CentStability)
plot(MGM_CentStability, "edge", plot = "difference",onlyNonZero = TRUE,
order = "sample")
plot(MGM_CentStability, "edge", #plot = "difference",
onlyNonZero = TRUE,
order = "sample")
plot(MGM_CentStability, "edge", plot = "difference", onlyNonZero = TRUE,
order = "sample")
plot(MGM_CentStability, "strength", plot = "difference")
corStability(MGM_CentStability, cor = 0.7, statistics = "all", verbose = TRUE)
summary(MGM_CentStability, statistics = c("edge", "strength"),
perNode = FALSE, rank = FALSE)
summary(MGM_CentStability, statistics = c("edge", "strength"),
perNode = TRUE, rank = FALSE)
summary_MGM_CentStability = summary(MGM_CentStability, statistics = c("edge", "strength"),
perNode = TRUE, rank = FALSE)
View(summary_MGM_CentStability)
View(Bootnet_MGM)
Bootnet_MGM$sampleTable
Bootnet_MGM$bootTable
Bootnet_MGM$sample
library(pacman)
p_load(tidyverse, here, sjlabelled, stringr, glue, EGAnet, janitor, haven,
ggpubr, gridExtra, dplyr, GGally, qgraph, sjmisc, igraph,
imager, grid, psych, stargazer, mgm, patchwork, ggplot2,
NetworkComparisonTest, Matrix, bootnet, matrixcalc, openxlsx, devtools)
plot(boot1, plot = "interval", split0 = TRUE, order="sample", labels=FALSE)
plot(Bootnet_MGM, plot = "interval", split0 = TRUE, order="sample", labels=FALSE)
pdf('../Output/complete/Edge_CI.pdf', height = 50, width = 50)
plot(Bootnet_MGM, plot = "interval", split0 = TRUE, order="mean", labels=TRUE)
dev.off()
corStability(MGM_CentStability, cor = 0.7, statistics = "all", verbose = TRUE)
#(from: https://reisrgabriel.com/blog/2021-09-27-bootnet/)
differenceTest(Bootnet_MGM,
"N1--N2",
"N1--N5",
measure = "edge")
differenceTest(Bootnet_MGM,
"int_vac--comp",
"int_vac--pol_int",
measure = "edge")
differenceTest(Bootnet_MGM,
"vac_int--comp",
"vac_int--pol_int",
measure = "edge")
summary_MGM_CentStability
differenceTest(Bootnet_MGM,
"int_vac--tr_science",
"int_vac--pol_int",
measure = "edge")
saveRDS(Bootnet_MGM, here("Input", "Bootnet_complete.rds"))
saveRDS(MGM_CentStability, here("Input", "CentStability_complete.rds"))
summary_MGM_CentStability
differenceTest(Bootnet_MGM,
"int_vac--tr_science",
"int_vac--gov",
measure = "edge")
"int_vac--vac_bad",
differenceTest(Bootnet_MGM,
"int_vac--vac_bad",
"int_vac--gov",
measure = "edge")
differenceTest(Bootnet_MGM,
"int_vac--vac_bad",
"int_vac--age",
measure = "edge")
differenceTest(Bootnet_MGM,
"N8--N17",
"N22--N24",
measure = "edge")
library("pacman")
p_load(tidyverse, here, sjlabelled, stringr, glue, janitor, haven, stargazer, ltm)
#Load database
response_original = read_dta(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.dta"))  %>%
clean_names()
#Transform in RDS
saveRDS(response_original, here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))
prova = read_dta(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.dta"))  %>%
clean_names()
library("pacman")
p_load(tidyverse, here, sjlabelled, stringr, glue, janitor, haven, stargazer, ltm)
#Load database
#response_original = read_dta(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.dta"))  %>%
#clean_names()
#Transform in RDS
#saveRDS(response_original, here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))
#Import RDS
response_original = read_dta(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.dta"))  %>%
clean_names()
#Select and rename variables
W3 = response_original %>%
filter(info_wave==3) %>%
dplyr::select(c(b2_06, b2_07, d1, e4_bis, d4_01, d4_02, d5, e2_01, e2_04, f10, h1_01,
j5_01, j5_02, v1, v2, v3, f9, k1, k2, k3_01, k3_02, k3_03, k3_04, k3_05,
g2, g6_01, g6_02, g6_05, c1, s1, s2, s9)) %>%
mutate(across(b2_06:s9, ~replace(., .>97 , NA)))
colnames(W3) = c("comp_mask", "comp_hand", "judg_gov_covid", "judg_gov", "w2r_mov",
"w2r_asso", "he_eco", "tr_par", "tr_EU", "worry", "tr_science",
"vac_bad", "vac_sci", "vac_ob", "vac", "vac_int", "conspiracy",
"pol_int", "L-R", "PTV_DP", "PTV_FI", "PTV_L", "PTV_5SM",
"PTV_BOI", "health", "nerv", "depre", "diff", "eco_insec",
"sex", "age", "educ")
#combine vac_int and vac in INT_VAC
W3 = W3 %>%
mutate(int_vac = case_when(
(vac_int < 3  | vac == 1)~ 1,
(vac_int > 2 & vac == 2) ~ 0,)) %>%
dplyr::select(-c(vac_int, vac))
#invert polarity and binarize
W3 = W3 %>%
mutate((across(he_eco, ~ 11 - .)),
(across(vac_bad:vac_ob, ~ 6 - .)),
(across(pol_int, ~ 5 - .)),
worry = ifelse(worry<=2, 0, 1),
pol_int = ifelse(pol_int<=2, 0, 1),
conspiracy = ifelse(conspiracy<3, 1, 0),
eco_insec = ifelse(eco_insec<=2, 0, 1),
sex = ifelse(sex==2, 0, 1),
educ = ifelse(educ<5, 0, 1),
(across(health,  ~ 6 - .)))
#PCA
#compliance
compliance = data.frame(W3$comp_mask, W3$comp_hand)
compliance = na.omit(compliance)
pr_compliance <- princomp(na.omit(compliance), cor = TRUE)
pr_compliance #unidimensional
W3$comp = apply(W3[1:2], 1, mean, na.rm = TRUE)
W3 = W3 %>%
dplyr::select(-c(comp_hand, comp_mask))
#Gov
gov = data.frame(W3$judg_gov_covid, W3$judg_gov)
gov = na.omit(gov)
pr_gov <- princomp(na.omit(gov), cor = TRUE)
pr_gov #unidimensional
W3$gov = apply(W3[1:2], 1, mean, na.rm = TRUE)
W3 = W3 %>%
dplyr::select(-c(judg_gov_covid, judg_gov))
#w2r
w2r = data.frame(W3$w2r_mov, W3$w2r_asso)
w2r = na.omit(w2r)
pr_w2r <- princomp(na.omit(w2r), cor = TRUE)
pr_w2r #unidimensional
W3$w2r = apply(W3[1:2], 1, mean, na.rm = TRUE)
W3 = W3 %>%
dplyr::select(-c(w2r_mov, w2r_asso))
#inst_tr
inst_tr = data.frame(W3$tr_par, W3$tr_EU)
inst_tr = na.omit(inst_tr)
pr_inst_tr <- princomp(na.omit(inst_tr), cor = TRUE)
pr_inst_tr #unidimensional
W3$inst_tr = apply(W3[2:3], 1, mean, na.rm = TRUE)
W3 = W3 %>%
dplyr::select(-c(tr_par, tr_EU))
#covid health difficulties
c_h_d = data.frame(W3$nerv, W3$depre, W3$diff)
c_h_d = na.omit(c_h_d)
pr_c_h_d <- princomp(na.omit(c_h_d), cor = TRUE)
pr_c_h_d #unidimensional
W3$c_h_d = apply(W3[16:18], 1, mean, na.rm = TRUE)
W3 = W3 %>%
dplyr::select(-c(nerv, depre, diff))
#alphas
cronbach.alpha(compliance, CI=TRUE, standardized=TRUE)
cronbach.alpha(gov, CI=TRUE, standardized=TRUE)
cronbach.alpha(w2r, CI=TRUE, standardized=TRUE)
cronbach.alpha(inst_tr, CI=TRUE, standardized=TRUE)
cronbach.alpha(c_h_d, CI=TRUE, standardized=TRUE)
#distinct dataset for conspiracy (avoid case dispersions)
W3_complete = W3 %>%
na.omit()
W3_nocons = W3 %>%
dplyr::select(-conspiracy) %>%
na.omit()
saveRDS(W3_complete, here("Input", "W3_complete.rds"))
saveRDS(W3_nocons, here("Input", "W3_nocons.rds"))
library("pacman")
p_load(tidyverse, here, sjlabelled, stringr, glue, janitor, haven, stargazer, ltm)
#Load database
#response_original = read_dta(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.dta"))  %>%
#clean_names()
#Transform in RDS
#saveRDS(response_original, here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))
#Import RDS
response_original = read_dta(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.dta"))  %>%
clean_names()
#Load database
#response_original = read_dta(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.dta"))  %>%
#clean_names()
#Transform in RDS
#saveRDS(response_original, here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))
#Import RDS
response_original = read_dta(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))  %>%
clean_names()
#Import RDS
response_original = read_dta(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))  #%>%
#Import RDS
response_original = read_rds(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))  #%>%
#Import RDS
response_original = read_rds(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))  %>%
clean_names()
#Load database
#response_original = read_dta(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.dta"))  %>%
#clean_names()
#Transform in RDS
#saveRDS(response_original, here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))
#Import RDS
response_original = read_rds(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))  %>%
clean_names()
