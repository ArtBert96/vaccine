ggpubr, gridExtra, dplyr, GGally, qgraph, sjmisc, igraph,
imager, grid, psych, stargazer, mgm, patchwork, ggplot2,
NetworkComparisonTest, Matrix, bootnet, matrixcalc, openxlsx, devtools, jtools)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidyverse, here, sjlabelled, stringr, glue, EGAnet, janitor, haven,
ggpubr, gridExtra, dplyr, GGally, qgraph, sjmisc, igraph,
imager, grid, psych, stargazer, mgm, patchwork, ggplot2,
NetworkComparisonTest, Matrix, bootnet, matrixcalc, openxlsx, devtools, jtools)
W3 = readRDS((here("Input", "W3.rds")))
## network objects
type <-c("g","g","c","g","c","g","g","g","g","g","g","g","g","g","c","c","g","c",
"g","c","c","g","g","g")
level <-c("1","1","2","1","2","1","1","1","1","1","1","1","1","1","2","2","1","2",
"1","2","2","1","1","1")
shortnames <- c(
"vac_bad",
"vac_ob",
"worry",
"risk",
"conspiracy",
"nat",
"h_locus",
"he_eco",
"PTV_L",
"PTV_5SM",
"PTV_BOI",
"tr_sci",
"tr_h",
"pray",
"media",
"sex",
"age",
"educ",
"reg",
"eco_insec",
"hesitancy",
"comp",
"gov",
"inst_tr")
longnames <- c(
"Vaccine bad for health",
"Vaccination obligation",
"Worry about infection",
"Risk perception",
"Endorsing conspiracy theories",
"Trust in alternative medicine",
"Internal health locus of control",
"Public health vs economy",
"Propensity to vote for L",
"Propensity to vote for 5SM",
"Propensity to vote for BOI",
"Trust in science",
"Trust in health syst",
"Religion, pray",
"Digital media diet",
"Sex",
"Age",
"Education",
"Rural region",
"Economic insecurity",
"Vaccine hesitancy",
"Compliance to preventive behaviors",
"Approval of Government",
"Institutional trust")
shapes <- c(
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"square",
"circle",
"circle",
"circle")
# Community detection function
communityStability <- function(data, type, level, iterations)
{
communityMemberships <- list()
for (i in 1:iterations)
{
fitGraph <- mgm(data, type, level, k = 2, verbatim = TRUE)
iGraph<- graph_from_adjacency_matrix(abs
(fitGraph$pairwise$wadj), "undirected", weighted =
TRUE)
communityMemberships[[i]] <- cluster_walktrap(iGraph)$membership
}
communityOverlap <- matrix(NA, length(data), length(data))
for(j in 1:length(data))
{
overlapPerNode <- matrix(NA, iterations, ncol(communityOverlap))
for(k in 1: iterations)
{
overlapPerNode[k,] <- as.numeric(communityMemberships[[k]][j] == communityMemberships[[k]])
}
communityOverlap[j,] <- apply(overlapPerNode, 2, mean)
}
diag(communityOverlap) <- 0
return(list(communityMemberships = communityMemberships, communityOverlap = communityOverlap))
}
set.seed(1)
FitW3 <- mgm(W3, type, level, k = 2, binarySign = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidyverse, here, sjlabelled, stringr, glue, EGAnet, janitor, haven,
ggpubr, gridExtra, dplyr, GGally, qgraph, sjmisc, igraph,
imager, grid, psych, stargazer, mgm, patchwork, ggplot2,
NetworkComparisonTest, Matrix, bootnet, matrixcalc, openxlsx, devtools, jtools)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidyverse, here, sjlabelled, stringr, glue, EGAnet, janitor, haven,
ggpubr, gridExtra, dplyr, GGally, qgraph, sjmisc, igraph,
imager, grid, psych, stargazer, mgm, patchwork, ggplot2,
NetworkComparisonTest, Matrix, bootnet, matrixcalc, openxlsx, devtools, jtools)
W3 = readRDS((here("Input", "W3.rds")))
## network objects
type <-c("g","g","c","g","c","g","g","g","g","g","g","g","g","g","c","c","g","c",
"g","c","c","g","g","g")
level <-c("1","1","2","1","2","1","1","1","1","1","1","1","1","1","2","2","1","2",
"1","2","2","1","1","1")
shortnames <- c(
"vac_bad",
"vac_ob",
"worry",
"risk",
"conspiracy",
"nat",
"h_locus",
"he_eco",
"PTV_L",
"PTV_5SM",
"PTV_BOI",
"tr_sci",
"tr_h",
"pray",
"media",
"sex",
"age",
"educ",
"reg",
"eco_insec",
"hesitancy",
"comp",
"gov",
"inst_tr")
longnames <- c(
"Vaccine bad for health",
"Vaccination obligation",
"Worry about infection",
"Risk perception",
"Endorsing conspiracy theories",
"Trust in alternative medicine",
"Internal health locus of control",
"Public health vs economy",
"Propensity to vote for L",
"Propensity to vote for 5SM",
"Propensity to vote for BOI",
"Trust in science",
"Trust in health syst",
"Religion, pray",
"Digital media diet",
"Sex",
"Age",
"Education",
"Rural region",
"Economic insecurity",
"Vaccine hesitancy",
"Compliance to preventive behaviors",
"Approval of Government",
"Institutional trust")
shapes <- c(
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"circle",
"square",
"circle",
"circle",
"circle")
# Community detection function
communityStability <- function(data, type, level, iterations)
{
communityMemberships <- list()
for (i in 1:iterations)
{
fitGraph <- mgm(data, type, level, k = 2, verbatim = TRUE)
iGraph<- graph_from_adjacency_matrix(abs
(fitGraph$pairwise$wadj), "undirected", weighted =
TRUE)
communityMemberships[[i]] <- cluster_walktrap(iGraph)$membership
}
communityOverlap <- matrix(NA, length(data), length(data))
for(j in 1:length(data))
{
overlapPerNode <- matrix(NA, iterations, ncol(communityOverlap))
for(k in 1: iterations)
{
overlapPerNode[k,] <- as.numeric(communityMemberships[[k]][j] == communityMemberships[[k]])
}
communityOverlap[j,] <- apply(overlapPerNode, 2, mean)
}
diag(communityOverlap) <- 0
return(list(communityMemberships = communityMemberships, communityOverlap = communityOverlap))
}
set.seed(1)
FitW3 <- mgm(W3, type, level, k = 2, binarySign = TRUE)
#function LOAD THE OBJECT down below TO SAVE TIME:
#CommunityStabTotal<-communityStability(W3, type, level, it=1000)
#load the object instead:
CommunityStabTotal = readRDS(here("Input", "CommunityStabTotal.rds"))
# Visualize community stability
pdf(file = '../Output/community_stability.pdf',paper = "USr",
height = 9, width = 12)
qgraph(CommunityStabTotal$communityOverlap, layout = "spring",
theme = "Borkulo", labels = shortnames,
nodeNames = longnames,vsize=4.0,
edge.labels=FALSE, legend = TRUE, legend.cex = 0.3)
dev.off()
# Vizualise detected communities
inputCommDetection_total<-CommunityStabTotal$communityOverlap
inputCommDetection_total[which(inputCommDetection_total <= .90)] <- 0
pdf(file = '../Output/detected_communities.pdf',paper = "USr",
height = 9, width = 12)
qgraph(inputCommDetection_total, layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames, vsize=4.0,
edge.labels=FALSE, legend = TRUE, legend.cex = 0.3)
dev.off()
# group variables based on TH CHECK AGAIN BASED ON THE TABLE
#Totalgroup_comm <- list(
# "Vaccine related"=c(1,2),
# "Individual/group"=c(3:8,22),
# "Context"=c(9:20,23,24),
# "Hesitancy"=c(21))
Totalgroup_comm <- list(
" "=c(1,2,12,21),
" "=c(3,4,7,14:20,22),
" "=c(5,6,8,10,13,23,24),
" "=c(9,11))
# define nice colors
Totalgroup_cols <- c("#74A4BC","#9FD6C3","#F1E898","#FF725E")
#enables theme colorblind because we don't need to specify edge.color
inputGraphMGM <- FitW3$pairwise$wadj
signsGraphMGM <- FitW3$pairwise$signs
signsGraphMGM[which(is.na(signsGraphMGM))] <- 1
inputGraphMGM <- inputGraphMGM*signsGraphMGM
# refined, no minimum
set.seed(1)
pdf(file = '../Output/MGM_nomin.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames, nodeNames = longnames,
cut = 0.10, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.4, borders = FALSE)
dev.off()
# refined,  minimum = 0.5
pdf(file = '../Output/MGM_min_05.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.05, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
# refined,  minimum = 0.10
pdf(file = '../Output/MGM_min_10.pdf',paper = "USr", height = 9, width = 12)
GraphMGM<-qgraph(inputGraphMGM,
layout = "spring", theme = "Borkulo",
labels = shortnames,nodeNames = longnames,
cut = 0.10, minimum = 0.15, maximum = 1,
details = FALSE, vsize=6.0, shape = shapes,
groups=Totalgroup_comm, color= Totalgroup_cols,
legend = TRUE, legend.cex = 0.3, borders = FALSE)
dev.off()
#graph with complete labels for centrality plot
GraphMGMCENT<-qgraph(inputGraphMGM,
layout = "spring", theme = "colorblind",
labels = longnames, minimum = 0,
cut = 0.10, maximum = 1, details = TRUE,
legend = FALSE)
#centrality Total
centMGM <- centralityTable(GraphMGMCENT,standardized = FALSE)
#CentralityPlot Total
centrality_table = centralityPlot(GraphMGMCENT, include = c("Strength"), scale = "raw",
orderBy = "Strength") + theme_nice() + theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Centrality_Table.jpg"), centrality_table)
#Shortest Path Lenght
SPLMGM <- centrality(GraphMGM)$ShortestPathLengths
SPLMGM <- SPLMGM[upper.tri(SPLMGM)]
#Average shortest path length
ASPL_MGM <- mean(SPLMGM)
#edge weight accuracy: non parametric bootstrap with 8 cores
#edgeacc =  bootnet(W3, nBoots = 1000, nCores = 8, 'mgm')
#load the object instead:
edgeacc = readRDS(here("Input", "edgeacc.rds"))
#plot 1
pdf('../Output/robustness/edge_accuracy.pdf', height = 70, width = 50)
plot(edgeacc, labels = longnames, order = "sample")
dev.off()
#Plot 2
pdf('../Output/robustness/edge_accuracy_CI.pdf', height = 70, width = 50)
plot(edgeacc, plot = "interval", split0 = TRUE, order="sample", labels=longnames)
dev.off()
#summary
saummary_edgeacc = summary(edgeacc, statistics = c("edge", "strength"),
perNode = FALSE, rank = FALSE)
# case dropping bootstrap
#centstab = bootnet(W3, nBoots = 1000, 'mgm', type = "case", nCores = 8)
#load the object instead:
centstab = readRDS(here("Input", "centstab.rds"))
#plot 1
pdf('../Output/robustness/Centrality_stability.pdf', height = 70, width = 50)
plot(centstab, "Strength", perNode = TRUE, labels = longnames,
subsetRange = c(100,50))
dev.off()
#Plot 2
pdf('../Output/robustness/Centrality_stability_CI.pdf', height = 70, width = 50)
plot(centstab, "Strength", CIstyle =  "quantiles")
dev.off()
#CS-coefficient (result should be above 0.25, better if above 0.5)
corstab = corStability(centstab)
# Test: difference of weight ties 2-3 vs 4-5
differenceTest(edgeacc, 2--3, 3--4, "strength")
# Plot test results for every edge weight in the network
pdf('../Output/robustness/test_edges.pdf', height = 70, width = 50)
plot(edgeacc, "edge", plot = "difference", onlyNonZero = TRUE, order = "sample",
labels = T)
dev.off()
# Test: difference of strength of node 2 vs 3 (if the bootstrapped CI include 0, they do not differ)
differenceTest(edgeacc, 2, 3, "strength")
# Plot test results for every edge weight in the network
pdf('../Output/robustness/test_strenghts.pdf', height = 70, width = 50)
plot(edgeacc, "strength", order = "mean", labels = T)
dev.off()
#small world network
W3_small_core = smallworldness(FitW3$pairwise$wadj, B = 1000)
W3_small_core
#communities
saveRDS(CommunityStabTotal, here("Input", "CommunityStabTotal.rds"))
#bootnet
saveRDS(edgeacc, here("Input","edgeacc.rds"))
saveRDS(centstab, here("Input", "centstab.rds"))
##only upper triangle without edge weigths 0 for readability
EdgeWeight_Total_half<-upper.triangle(inputGraphMGM)
EdgeWeight_Total_half[EdgeWeight_Total_half == 0] <- NA
EdgeWeightsExcel_half<- list("mgm" = EdgeWeight_Total_half)
write.xlsx(EdgeWeightsExcel_half, "../Output/EdgeWeightsExcel_half.xlsx",
colWidths = "auto", rowNames = TRUE)
# case dropping bootstrap
centstab = bootnet(W3, nBoots = 1000, 'mgm', type = "case", nCores = 8)
library("pacman")
p_load(tidyverse, here, sjlabelled, stringr, glue, janitor, haven, stargazer,
ltm, skimr)
#remove scientific notation
options(scipen=999)
#Load database
#response_original = read_dta(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.dta"))  %>%
#clean_names()
#Transform in RDS
#saveRDS(response_original, here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))
#Import RDS
response_original = read_rds(here("Input", "v1.0_ResPOnsE_COVID_19_W1-W4-2.rds"))  %>%
clean_names()
# 10 November to 22 December 2021
#Select and rename variables
W3 = response_original %>%
filter(info_wave==3) %>%
dplyr::select(c(v2,v3,j5_01,v1,f10,f3,f9,h1_04,j4bis_b,b2_03,b2_06,b2_07,d5,d1,
e4_bis,k3_03,k3_04,k3_05,e2_01,e2_04,j5_02,e3,g7,c5,s1,s2,
s9,s8,c1)) %>%
mutate(across(v2:c1, ~replace(., .>97 , NA))) %>%
na.omit()
#colnames
colnames(W3) = c("vac","vac_int","vac_bad","vac_ob","worry","risk","conspiracy",
"nat","h_locus","comp_dist", "comp_mask","comp_hand","he_eco",
"judg_gov_covid","judg_gov","PTV_L","PTV_5SM","PTV_BOI","tr_par",
"tr_EU","tr_sci","tr_h","pray","media","sex","age","educ",
"reg","eco_insec")
# W3 full to do ttest (next section)
W3_full = W3 %>%
mutate(hesitancy = case_when(
(vac_int < 3  | vac == 1)~ 0,
(vac_int > 2 & vac == 2)~ 1,))
#combine vac_int and vac in INT_VAC
W3 = W3 %>%
mutate(hesitancy = case_when(
(vac_int < 3  | vac == 1)~ 0,
(vac_int > 2 & vac == 2)~ 1,)) %>%
dplyr::select(-c(vac_int, vac))
#invert polarity and recode
W3 = W3 %>%
mutate((across(vac_bad:vac_ob, ~ 6 - .)), #inverted polarity
worry = ifelse(worry<=2, 0, 1),
(across(risk,  ~ 6 - .)), #inverted
conspiracy = ifelse(conspiracy<3, 1, 0),
(across(he_eco,  ~ 11 - .)), #inverted
(across(tr_sci,  ~ 6 - .)), #inverted
(across(pray,  ~ 6 - .)), #inverted
media = ifelse(media>=4 & media<=7, 1, 0),
sex = ifelse(sex==2, 0, 1),
educ = ifelse(educ<5, 0, 1),
reg = ifelse(reg<=3, 1, 0),
eco_insec = ifelse(eco_insec<=2, 0, 1))
#Select and rename variables (no "na.omit")
W3_full_nolist = response_original %>%
filter(info_wave==3) %>%
dplyr::select(c(v2,v3,j5_01,v1,f10,f3,f9,h1_04,j4bis_b,b2_03,b2_06,b2_07,d5,d1,
e4_bis,k3_03,k3_04,k3_05,e2_01,e2_04,j5_02,e3,g7,c5,s1,s2,
s9,s8,c1)) %>%
mutate(across(v2:c1, ~replace(., .>97 , NA)))
#colnames
colnames(W3_full_nolist) = c("vac","vac_int","vac_bad","vac_ob","worry","risk","conspiracy",
"nat","h_locus","comp_dist", "comp_mask","comp_hand","he_eco",
"judg_gov_covid","judg_gov","PTV_L","PTV_5SM","PTV_BOI","tr_par",
"tr_EU","tr_sci","tr_h","pray","media","sex","age","educ",
"reg","eco_insec")
# W3_full_nolist full to do ttest (next section)
W3_full_nolist = W3_full_nolist %>%
mutate(hesitancy = case_when(
(vac_int < 3  | vac == 1)~ 0,
(vac_int > 2 & vac == 2)~ 1,))
#invert polarity and recode
W3_full_nolist = W3_full_nolist %>%
mutate((across(vac_bad:vac_ob, ~ 6 - .)), #inverted polarity
worry = ifelse(worry<=2, 0, 1),
(across(risk,  ~ 6 - .)), #inverted
conspiracy = ifelse(conspiracy<3, 1, 0),
(across(he_eco,  ~ 11 - .)), #inverted
(across(tr_sci,  ~ 6 - .)), #inverted
(across(pray,  ~ 6 - .)), #inverted
media = ifelse(media>=4 & media<=7, 1, 0),
sex = ifelse(sex==2, 0, 1),
educ = ifelse(educ<5, 0, 1),
reg = ifelse(reg<=3, 1, 0),
eco_insec = ifelse(eco_insec<=2, 0, 1))
# I had 9325 before listwise, 1535 after. It means I m working with 16,46% of
# the sample. Hence, I ll do t test full sample vs restricted one.
#loop each V and run t.test
tests_list <- lapply(seq_along(W3_full), function(i){
t.test(W3_full[[i]], W3_full_nolist[[i]])
})
means = sapply(tests_list, '[[', 'statistic')
pvalues = as.data.frame(sapply(tests_list, '[[', 'p.value'))
cis = sapply(tests_list, '[[', 'conf.int')
#print true when the means differ
pvalues[,2] = names(W3_full)
pvalues[,3] = with(pvalues,pvalues<0.05)
#PCA
#compliance
compliance = data.frame(W3$comp_mask, W3$comp_hand, W3$comp_dist)
compliance = na.omit(compliance)
pr_compliance <- princomp(na.omit(compliance), cor = TRUE)
pr_compliance #unidimensional
W3$comp = apply(W3[8:10], 1, mean, na.rm = TRUE)
W3 = W3 %>%
dplyr::select(-c(comp_hand, comp_mask, comp_dist))
#Gov
gov = data.frame(W3$judg_gov_covid, W3$judg_gov)
gov = na.omit(gov)
pr_gov <- princomp(na.omit(gov), cor = TRUE)
pr_gov #unidimensional
W3$gov = apply(W3[9:10], 1, mean, na.rm = TRUE)
W3 = W3 %>%
dplyr::select(-c(judg_gov_covid, judg_gov))
#inst_tr (excluded from core)
inst_tr = data.frame(W3$tr_par, W3$tr_EU)
inst_tr = na.omit(inst_tr)
pr_inst_tr <- princomp(na.omit(inst_tr), cor = TRUE)
pr_inst_tr #unidimensional
W3$inst_tr = apply(W3[12:13], 1, mean, na.rm = TRUE)
W3 = W3 %>%
dplyr::select(-c(tr_par, tr_EU))
#alphas
cronbach.alpha(compliance, CI=TRUE, standardized=TRUE)
cronbach.alpha(gov, CI=TRUE, standardized=TRUE)
cronbach.alpha(inst_tr, CI=TRUE, standardized=TRUE)
summary_vaccine  = as.data.frame(skim(W3))
stargazer(as.data.frame(W3), type = "text", nobs = TRUE)
saveRDS(W3, here("Input", "W3.rds"))
